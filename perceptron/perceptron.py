# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D53Z0FWTz5q_6Sfle5q3lABf3w8pUrn7
"""

import numpy as np

class perceptron:
  def __init__(self, pesos, taxa, limiar):
      self.peso = pesos
      self.taxa = taxa
      self.limiar = limiar
      self.saida = 1
      
  def update_w(self,entrada,desej):
    self.limiar += (desej-self.saida)*self.taxa*(-1)
    for i in range(0,len(entrada)):
      self.peso[i]+= self.taxa*entrada[i]*(desej-self.saida)

  def cell(self,entrada):
    m = np.multiply(entrada,self.peso) 
    X = np.sum(m)- self.limiar
    return (X>=0)*2-1

  def perceptron(self,entrada,desej):
    while self.saida != desej:
      self.update_w(entrada,desej)
      self.saida = self.cell(entrada)
    return self.saida

  
percp = perceptron([0.4,-0.6,0.6], 0.4, 0.5)

#TRAINAMENTO:
train_in = [[0,0,1],[1,1,0]]
train_out= [-1     , 1     ]

saida = percp.perceptron(train_in[0],train_out[0])
saida = percp.perceptron(train_in[1],train_out[1])

#TESTES:
tests_in = [[1,1,1],[0,0,0],[1,0,0],[0,1,1]]

for i in range(len(tests_in)):
  print( tests_in[i], percp.cell(tests_in[i]))